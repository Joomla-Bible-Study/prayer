<?php/** * @version $Id: script.php,v 3.x * @package prayer */defined('_JEXEC') or die ('Restricted Access');/** * Prayer Installer Script * * @package  Prayer.Site * * @since    4.0 */class Com_PrayerInstallerScript{	private $release = '4.0';	private $params;	/**	 * The list of extra modules and plugins to install	 *	 * @author Nicholas K. Dionysopoulos	 * @var   array $_installation_queue Array of Items to install	 * @since 1.7.0	 */	private $installation_queue = [		// -- modules => { (folder) => { (module) => { (position), (published) } }* }*		'modules' => [			'site'  => ['mod_prayer_latest' => 0, 'mod_prayer_menu' => 0, 'mod_prayer_submit_request' => 0, 'mod_prayer_subscribe' => 0,]		],		// -- plugins => { (folder) => { (element) => (published) }* }*		'plugins' => [			'system' => ['prayeremail' => 1,],			'finder' => ['prayer' => '1',]		],	];	protected $versions = array(		'PHP'     => array(			'5.3' => '5.3.1',			'0'   => '5.4.23' // Preferred version		),		'MySQL'   => array(			'5.1' => '5.1',			'0'   => '5.5' // Preferred version		),		'Joomla!' => array(			'3.4' => '3.4.1',			'0'   => '3.4.1' // Preferred version		)	);	/**	 * Install	 *	 * @param   JInstallerFile  $parent  Where it is coming from	 *	 * @return void	 *	 * @since 4.0	 */	public function install($parent)	{		$this->params = $this->getParams();	}	/**	 * Get Params	 *	 * @return array|null	 *	 * @since 4.0	 */	private function getParams()	{		$xml = simplexml_load_string(JPATH_ROOT . '/administrator/components/com_prayer/config.xml');		$ini = array();		$fieldsets = $xml->fields->fieldset;		$fieldscount = count($fieldsets);		for ($i = 0; $i < $fieldscount; $i++)		{			if (!count($fieldsets[$i]->children()))			{				return null;			}			foreach ($fieldsets[$i] as $field)			{				if (($name = $field->attributes()->name) === null)				{					continue;				}				if (($value = $field->attributes()->default) === null)				{					continue;				}				if ($name != '@spacer')				{					$ini[(string) $name] = (string) $value;				}			}		}		return $ini;	}	/**	 * Set Params	 *	 * @param   array  $param_array  ?	 *	 * @return void	 *	 * @since version	 */	public function setParams($param_array)	{		if (count($param_array) > 0)		{			$params = [];			$db     = JFactory::getDbo();			foreach ($param_array as $name => $value)			{				$params['params'][(string) $name] = (string) $value;			}			$paramString = json_encode($params);			$db->setQuery('UPDATE #__extensions SET params=' . $db->quote($paramString) . ' WHERE element="com_prayer"');			$db->execute();		}	}	/**	 * Uninstall	 *	 * @param   JInstallerFile  $parent  Where it is coming from	 *	 * @return void	 *	 * @since  4.0	 */	public function uninstall($parent)	{		$this->uninstallPlugin($parent);	}	/**	 * Uninstall Plugin script	 *	 * @param   JInstallerFile  $parent  Where it is coming from	 *	 * @return void	 *	 * @since 4.0	 */	public function uninstallPlugin($parent)	{		$db = JFactory::getDBO();		$query = "SELECT extension_id FROM #__extensions WHERE type='plugin' AND element='com_prayer' AND folder='system'";		$db->setQuery($query);		$id = $db->loadResult();		$installer = new JInstaller;		$installer->uninstall('plugin', $id);	}	/**	 * Update	 *	 * @param   JInstallerFile  $parent  Where it is coming from	 *	 * @return void	 *	 * @since 4.0	 */	public function update($parent)	{		echo '<p>' . JText::_('COM_PRAYER_UPDATE_TEXT') . '</p>';	}	/**	 * Pre Flight	 *	 * @param   string          $type    Type of install	 * @param   JInstallerFile  $parent  Where it is coming from	 *	 * @return bool	 *	 * @since  4.0	 */	public function preflight($type, $parent)	{		$JVersion = new JVersion();		if (version_compare($JVersion->getShortVersion(), '3.0', 'lt'))		{			JError::raiseWarning(null, 'Cannot install Prayer in a Joomla release prior to 3.0');			return false;		}		if ($type == 'update')		{			include_once 'components/com_prayer/helpers/pc_version.php';			$pcversion = &PrayerVersion::getInstance();			$oldrelease = $pcversion->getShortVersion();			$rel = $oldrelease . ' to ' . $this->release;			if (version_compare($this->release, $oldrelease, 'le'))			{				JError::raiseWarning(null, 'Incorrect version sequence.  Cannot upgrade ' . $rel);				return false;			}			else			{				$rel = $this->release;			}		}//    echo '<p>'.JText::_('COM_PRAYER_PREFLIGHT_'.$type.'_TEXT').'</p>';	}	/**	 * Check Requirements	 *	 * @param   string  $version  JBSM version to check for.	 *	 * @return bool	 *	 * @since 7.1.0	 */	public function checkRequirements($version)	{		$db   = JFactory::getDbo();		$pass = $this->checkVersion('PHP', phpversion());		$pass &= $this->checkVersion('Joomla!', JVERSION);		$pass &= $this->checkVersion('MySQL', $db->getVersion());		$pass &= $this->checkDbo($db->name, array('mysql', 'mysqli'));		$pass &= $this->checkExtensions($this->extensions);		$pass &= $this->checkJBSM($version);		return $pass;	}	/**	 * Check Verions of JBSM	 *	 * @param   string  $name     Name of version	 * @param   string  $version  Version to look for	 *	 * @return bool	 *	 * @throws \Exception	 *	 * @since 7.1.0	 */	protected function checkVersion($name, $version)	{		$app   = JFactory::getApplication();		$major = $minor = 0;		foreach ($this->versions[$name] as $major => $minor)		{			if (!$major || version_compare($version, $major, '<'))			{				continue;			}			if (version_compare($version, $minor, '>='))			{				return true;			}			break;		}		if (!$major)		{			$minor = reset($this->versions[$name]);		}		$recommended = end($this->versions[$name]);		$app->enqueueMessage(			sprintf("%s %s is not supported. Minimum required version is %s %s, but it is higly recommended to use %s %s or later.",				$name, $version, $name, $minor, $name, $recommended			), 'notice'		);		return false;	}	/**	 * Post Flight	 *	 * @param   string          $type    Type of install	 * @param   JInstallerFile  $parent  Where it is coming from	 *	 * @return void	 *	 * @since 4.0	 */	public function postflight($type, $parent)	{		$installPlugin = $this->installPlugin();		if (!$installPlugin)		{			JError::raiseWarning(66508, JText::_('Could not install PrayerEmail plugin. Uninstall any previous versions and install manually.'));		}		else		{			$this->activatePlugin();		}		if ($type == 'update')		{			$pcParams = JComponentHelper::getParams('com_prayer');			$pcParamsArray = $pcParams->toArray();			foreach ($pcParamsArray['params'] as $name => $value)			{				$this->config[(string) $name] = (string) $value;			}			$this->setRules($this->config);			$this->updateSendTo();			$parent->getParent()->setRedirectURL('index.php?option=com_installer&view=update');		}		elseif ($type == 'install')		{			$this->setParams($this->params);			$this->setRules();			$this->addPrayerCategory();			$this->updateSendTo();			$parent->getParent()->setRedirectURL('index.php?option=com_prayer');		}	}	/**	 * Install Plugin	 *	 * @return bool	 *	 * @since 4.0	 */	private function installPlugin()	{		$folder = JPATH_ADMINISTRATOR . '/components/com_prayer/plugins/email/';		$installedfolder = JPATH_ROOT . '/plugins/system/prayeremail/';		$filearray = JFolder::files($folder);		$status = true;		$installed = JFolder::exists($installedfolder);		if (count($filearray) > 0)		{			$installer = new JInstaller();			if ($installed)			{				if (!$installer->update($folder))				{					$status = false;				}			}			else			{				if (!$installer->install($folder))				{					$status = false;				}			}		}		return $status;	}	/**	 * Activate Plugin	 *	 * @return void	 *	 * @since 4.0	 */	private function activatePlugin()	{		$db = JFactory::getDBO();		$sql = "UPDATE #__extensions SET enabled=1 WHERE type='plugin' AND folder='system' AND element='prayeremail'";		$db->setQuery($sql);		if (!$db->execute())		{			JError::raiseWarning(66508, JText::_('Could not publish PrayerEmail plugin'));		}	}	/**	 * Set Rules	 *	 * @param   array  $param_array  ?	 *	 * @return void	 *	 * @since 4.0	 */	private function setRules($param_array)	{		$db    = JFactory::getDbo();		$query = $db->getQuery(true);		$query->select('rules');		$query->from('#__assets');		$query->group('id, rules, lft');		$query->where('(name = ' . $db->q('com_prayer') . ')');		$db->setQuery($query);		$result = $db->loadColumn();		if ($result[0] == '{}')		{			$rules = json_encode(				array(					'prayer.view' => array(1 => 1),					'prayer.post' => array(1 => 1),					'prayer.publish' => array(7 => 1, 8 => 1),					'prayer.subscribe' => array(1 => 1),					'prayer.devotional' => array(1 => 1),					'prayer.links' => array(1 => 1),					'core.admin' => array(),					'core.manage' => array(),					'core.create' => array(),					'core.delete' => array(),					'core.edit' => array(),					'core.edit.state' => array(),					'core.edit.own' => array()				)			);			$db->setQuery("UPDATE #__assets SET rules=" . $db->q($rules) . " WHERE name='com_prayer'");			$db->execute();		}	}	/**	 * Update Send To	 *	 * @return mixed	 *	 * @since 4.0	 */	private function updateSendTo()	{		jimport('joomla.date.date');		$dateset = new JDate;		$now = $dateset->format('Y-m-d H:i:s');		$db = JFactory::getDBO();		$db->setQuery("SHOW COLUMNS FROM #__prayer LIKE 'sendto'");		$cksendtotype = $db->loadObjectList();		if (!empty($cksendtotype) && ($cksendtotype[0]->Field == 'sendto' && $cksendtotype[0]->Type != 'datetime'))		{			$db->setQuery("ALTER TABLE #__prayer MODIFY sendto datetime NOT NULL DEFAULT '0000-00-00 00:00:00'");			if (!$db->execute())			{				return JError::raiseWarning(500, $db->stderr());			}			$sql = "UPDATE #__prayer SET sendto='" . $now . "' WHERE publishstate=0";			$db->setQuery($sql);			if (!$db->execute())			{				JError::raiseWarning(66508, JText::_('Could not modify SendTo status in prayer database'));			}		}		$db->setQuery("SHOW COLUMNS FROM #__prayer LIKE 'praise'");		$cksendtotype2 = $db->loadObjectList();		if (count($cksendtotype2) > 0)		{			$db->setQuery("ALTER TABLE #__prayer DROP praise");			if (!$db->execute())			{				return JError::raiseWarning(500, $db->stderr());			}		}		$db->setQuery("SHOW COLUMNS FROM #__prayer LIKE 'adminsendto'");		$cksendtotype3 = $db->loadObjectList();		if (count($cksendtotype3) < 1)		{			$db->setQuery("ALTER TABLE #__prayer ADD adminsendto datetime NOT NULL DEFAULT '0000-00-00 00:00:00'");			if (!$db->execute())			{				return JError::raiseWarning(500, $db->stderr());			}			$sql = "UPDATE #__prayer SET adminsendto='" . $now . "' WHERE publishstate=0";			$db->setQuery($sql);			if (!$db->execute())			{				JError::raiseWarning(66508, JText::_('Could not modify AdminSendTo status in prayer database'));			}		}		return null;	}	/**	 * Add Prayer Category	 *	 * @return mixed	 *	 * @since 4.0	 */	private function addPrayerCategory()	{		// Create categories for our component		$basePath = JPATH_ADMINISTRATOR . '/components/com_categories';		require_once $basePath . '/models/category.php';		$config = array('table_path' => $basePath . '/tables');		$catmodel = new CategoriesModelCategory($config);		$catData = array(			'id' => 0,			'parent_id' => 0,			'level' => 1,			'path' => 'uncategorized',			'extension' => 'com_prayer',			'title' => 'Uncategorized',			'alias' => 'uncategorized',			'description' => '<p>This is the default prayer category</p>',			'published' => 1,			'language' => '*'		);		$status = $catmodel->save($catData);		if (!$status)		{			// Error::raiseWarning(500, JText::_('Unable to create default category!'));		}		$id1 = $catmodel->getItem()->id;		$db = JFactory::getDbo();		$db->setQuery("SHOW COLUMNS FROM #__prayer_links LIKE 'catid'");		$lwtable_nm1 = $db->loadObjectList();		if (count($lwtable_nm1) > 0)		{			$db->setQuery("UPDATE #__prayer_links SET catid=" . (int) $id1);			if (!$db->execute())			{				return JError::raiseWarning(500, $db->stderr());			}		}		$db->setQuery("SHOW COLUMNS FROM #__prayer_devotions LIKE 'catid'");		$lwtable_nm2 = $db->loadObjectList();		if (count($lwtable_nm2) > 0)		{			$db->setQuery("UPDATE #__prayer_devotions SET catid=" . (int) $id1);			if (!$db->execute())			{				return JError::raiseWarning(500, $db->stderr());			}		}		return null;	}}