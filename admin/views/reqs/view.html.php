<?php/** * prayer Component * * @license http://www.gnu.org/copyleft/gpl.html GNU/GPL * */defined('_JEXEC') or die();class CWMPrayerViewReqs extends JViewLegacy{	protected $items;	protected $pagination;	protected $state;	/**	 * Execute and display a template script.	 *	 * @param   string  $tpl  The name of the template file to parse; automatically searches through the template paths.	 *	 * @return  mixed  A string if successful, otherwise an Error object.	 *	 * @see     JViewLegacy::loadTemplate()	 * @since   3.0	 */	public function display($tpl = null)	{		$this->items         = $this->get('Items');		$this->state         = $this->get('State');		$this->pagination    = $this->get('Pagination');		$this->filterForm    = $this->get('FilterForm');		$this->activeFilters = $this->get('ActiveFilters');		// Check for errors.		if (count($errors = $this->get('Errors')))		{			JFactory::getApplication()->enqueueMessage(implode("\n", $errors), 'error');			return false;		}		CWMPrayerHelper::addSubmenu('reqs');		$this->addToolbar();		$this->sidebar = JHtmlSidebar::render();		return parent::display($tpl);	}	/**	 * Add the page title and toolbar.	 *	 * @since    4.0	 * @return void	 */	protected function addToolbar()	{		JToolbarHelper::title(JText::_('COM_CWMPRAYER_TITLE_REQS'));		JToolBarHelper::publishList("req.publish", 'JTOOLBAR_PUBLISH');		JToolBarHelper::unpublishList("req.unpublish", 'JTOOLBAR_UNPUBLISH');		JToolBarHelper::archiveList("req.archive");		JToolBarHelper::unarchiveList("req.unarchive");		JToolBarHelper::editList("req.edit");		JToolBarHelper::deleteList("Remove Request(s)?", "req.remove_req");		$cb = JToolBar::getInstance('toolbar');		$cb->appendButton(			'confirm',			JText::_('COM_CWMPRAYER_CUSTOM_BUTTON'),			'apply',			'COM_CWMPRAYER_PURGE',			'req.purge',			false		);	}}