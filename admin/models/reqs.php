<?php/** * Core Admin CWMPrayer file * * @package    CWMPrayer.Admin * @copyright  2007 - 2015 (C) Joomla Bible Study Team All rights reserved * @license    http://www.gnu.org/copyleft/gpl.html GNU/GPL * @link       http://www.JoomlaBibleStudy.org * */defined('_JEXEC') or die;class CWMPrayerModelReqs extends JModelList{	/**	 * Model context string.	 *	 * @var        string	 *	 * @since 7.0	 */	public $context = 'com_cwmprayer.reqs';	/**	 * Constructor	 *	 * @since 1.5	 */	public function __construct()	{		if (empty($config['filter_fields']))		{			$config['filter_fields'] = array(				'id', 'a.id',				'requesterid', 'a.requesterid',				'requester', 'a.requester',				'request', 'a.request',				'date', 'a.date',				'time', 'a.time',				'state', 'a.state',				'archivestate', 'a.archivestate',				'displaystate', 'a.displaystate',				'sendto', 'a.sendto',				'email', 'a.email',				'adminsendto', 'a.adminsendto',				'checked_out_time', 'a.checked_out_time',				'checked_out', 'a.checked_out',				'sessionid', 'a.sessionid',				'title', 'a.title',				'topic', 'a.topic',				'hits', 'a.hits'			);		}		parent::__construct($config);	}	/**	 * Method to checkin a row.	 *	 * @param   integer  $pk  The numeric id of the primary key.	 *	 * @return  boolean  False on failure or error, true otherwise.	 *	 * @since   12.2	 */	public function checkin($pk = null)	{		// Only attempt to check the row in if it exists.		if ($pk)		{			$user = JFactory::getUser();			// Get an instance of the row to checkin			/** @var \TablePrayer $table */			$table = $this->getTable('Prayer', 'Table');			if (!$table->load())			{				return false;			}			// Check if this is the user having previously checked out the row.			if ($table->checked_out > 0 && $table->checked_out != $user->get('id') && !$user->authorise('core.admin', 'com_checkin'))			{				JFactory::getApplication()->enqueueMessage(JText::_('JLIB_APPLICATION_ERROR_CHECKIN_USER_MISMATCH'), 'error');				return false;			}			// Attempt to check the row in.			if (!$table->checkin($pk))			{				return false;			}		}		return true;	}	/**	 * Method to auto-populate the model state.	 *	 * This method should only be called once per instantiation and is designed	 * to be called on the first call to the getState() method unless the model	 * configuration flag to ignore the request is set.	 *	 * Note. Calling getState in this method will result in recursion.	 *	 * @param   string  $ordering   An optional ordering field.	 * @param   string  $direction  An optional direction (asc|desc).	 *	 * @return  void	 *	 * @since   1.6	 */	protected function populateState($ordering = null, $direction = null)	{		$app = JFactory::getApplication('administrator');		$search = $this->getUserStateFromRequest($this->context . '.filter.search', 'filter_search');		$this->setState('filter.search', $search);		$published = $this->getUserStateFromRequest($this->context . '.filter.published', 'filter_published', '');		$this->setState('filter.published', $published);		// List state information.		parent::populateState('a.id', 'desc');	}	/**	 * Method to delete one or more records.	 *	 * @param   array  &$pks  An array of record primary keys.	 *	 * @return  boolean  True if successful, false if an error occurs.	 *	 * @since   1.6	 */	public function delete(&$pks)	{		$cid = JInput::get('cid', array(0), 'post', 'array');		$db = JFactory::getDBO();		var_dump($pks);		jexit('delet');		if (count($cid))		{			$cids = implode(',', $cid);			$db->setQuery("DELETE FROM #__cwmprayer WHERE id IN ($cids)");			if (!$db->execute())			{				Throw New Exception('DB error', 500);			}		}		if ($this->pcConfig['config_comments'] == 1)		{			$jcomments = JPATH_SITE . '/components/com_jcomments/jcomments.php';			if (file_exists($jcomments))			{				require_once $jcomments;				foreach ($cid as $delid)				{					JCommentsModel::deleteComments($delid, 'com_cwmprayer');				}			}		}		elseif ($this->pcConfig['config_comments'] == 2)		{			$jsc = JPATH_SITE . '/components/com_jsitecomments/helpers/jsc_class.php';			if (file_exists($jsc))			{				require_once $jsc;				foreach ($cid as $delid)				{					jsitecomments::JSCdelComment('com_cwmprayer', $delid);				}			}		}		$this->setRedirect(JRoute::_("index.php?option=" . $option . "&task=manage_req", false));	}	/**	 * Method to get a JDatabaseQuery object for retrieving the data set from a database.	 *	 * @return  JDatabaseQuery  A JDatabaseQuery object to retrieve the data set.	 *	 * @since   1.6	 */	protected function getListQuery()	{		// Create a new query object.		$db = $this->getDbo();		$query = $db->getQuery(true);		$user = JFactory::getUser();		// Select the required fields from the table.		$query->select(			$this->getState(				'list.select',				'a.id, a.requesterid, a.requester, a.request, a.date, a.time,' .				'a.state, a.displaystate, a.sendto, a.email, a.adminsendto,' .				'a.checked_out_time, a.checked_out, a.sessionid, a.title, a.topic, a.hits'			)		);		$query->select("DATE_FORMAT(CONCAT_WS(' ',a.date,a.time),'%Y-%m-%d %T') AS datetime");		$query->from('#__cwmprayer AS a');		// Join over the users for the checked out user.		$query->select('uc.name AS editor');		$query->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');		// Filter by published state		$published = $this->getState('filter.state');		if (is_numeric($published))		{			$query->where('a.state = ' . (int) $published);		}		elseif ($published === '')		{			$query->where('(a.state = 0 OR a.state = 1)');		}		// Filter by search in name.		$search = $this->getState('filter.search');		if (!empty($search))		{			if (stripos($search, 'id:') === 0)			{				$query->where('a.id = ' . (int) substr($search, 3));			}			elseif (stripos($search, 'name:') === 0)			{				$search = $db->Quote('%' . $db->escape(substr($search, 7), true) . '%');				$query->where('(uc.name LIKE ' . $search . ' OR uc.username LIKE ' . $search . ')');			}			else			{				$search = $db->Quote('%' . $db->escape($search, true) . '%');				$query->where('(a.requester LIKE ' . $search . ')');			}		}		// Add the list ordering clause.		$orderCol = $this->state->get('list.ordering');		$orderDirn = $this->state->get('list.direction');		$query->order($db->escape($orderCol . ' ' . $orderDirn));		return $query;	}}